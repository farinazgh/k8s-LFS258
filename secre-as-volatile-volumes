controlplane ~ ➜  vi my-secret.yaml
]
controlplane ~ ➜  kubectl apply -f my-secret.yaml
secret/specialofday created

controlplane ~ ➜  cat my-secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: specialofday
data:
  entree: bWVhdGxvYWY=

immutable: true

controlplane ~ ➜  vi my-pod.yaml

[1]+  Stopped                 vi my-pod.yaml

controlplane ~ ✦ ✖ vi my-pod.yaml

controlplane ~ ✦ ➜  cat my-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: foodie
spec:
  volumes:
    - name: specialofday-secret
      secret:
        secretName: specialofday
  containers:
    - name: dotfile-test-container
      image: nginx

      volumeMounts:
        - name: specialofday-secret
          readOnly: true
          mountPath: "/food/"

controlplane ~ ✦ ➜  kubectl apply -f my-pod.yaml
pod/foodie created

controlplane ~ ✦ ➜  kubectl get pods
NAME                          READY   STATUS    RESTARTS   AGE
foodie                        1/1     Running   0          8s
gold-nginx-5d9489d9cc-px5gv   1/1     Running   0          47m
label-pod3                    1/1     Running   0          46m
label-pod4                    1/1     Running   0          46m

controlplane ~ ✦ ➜  kubectl get pod foodie -o yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"name":"foodie","namespace":"default"},"spec":{"containers":[{"image":"nginx","name":"dotfile-test-container","volumeMounts":[{"mountPath":"/food/","name":"specialofday-secret","readOnly":true}]}],"volumes":[{"name":"specialofday-secret","secret":{"secretName":"specialofday"}}]}}
  creationTimestamp: "2024-04-14T08:08:24Z"
  name: foodie
  namespace: default
  resourceVersion: "11891"
  uid: 347c9ef1-377d-46a3-a751-0eba304867f8
spec:
  containers:
  - image: nginx
    imagePullPolicy: Always
    name: dotfile-test-container
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /food/
      name: specialofday-secret
      readOnly: true
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-v4nt4
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: specialofday-secret
    secret:
      defaultMode: 420
      secretName: specialofday
  - name: kube-api-access-v4nt4
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2024-04-14T08:08:24Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2024-04-14T08:08:28Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2024-04-14T08:08:28Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2024-04-14T08:08:24Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: containerd://3cba56c2616d54254699120e6adfc6ed08d65948c289f9fb8ec2466ac714723f
    image: docker.io/library/nginx:latest
    imageID: docker.io/library/nginx@sha256:9ff236ed47fe39cf1f0acf349d0e5137f8b8a6fd0b46e5117a401010e56222e1
    lastState: {}
    name: dotfile-test-container
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-04-14T08:08:27Z"
  hostIP: 192.6.56.3
  phase: Running
  podIP: 10.244.192.7
  podIPs:
  - ip: 10.244.192.7
  qosClass: BestEffort
  startTime: "2024-04-14T08:08:24Z"

ubectl create secret -h
Create a secret with specified type.

 A docker-registry type secret is for accessing a container registry.

 A generic type secret indicate an Opaque secret type.

 A tls type secret holds TLS certificate and its associated key.

Available Commands:
  docker-registry   Create a secret for use with a Docker registry
  generic           Create a secret from a local file, directory, or literal
value
  tls               Create a TLS secret

Usage:
  kubectl create secret (docker-registry | generic | tls) [options]

Use "kubectl create secret <command> --help" for more information about a given
command.
Use "kubectl options" for a list of global command-line options (applies to all
commands).

controlplane ~ ➜  echo -n 'meatloaf'
meatloaf
controlplane ~ ➜  echo -n 'meatloaf' | base64
bWVhdGxvYWY=

controlplane ~ ➜  kubectl get secrets
NAME           TYPE     DATA   AGE
specialofday   Opaque   1      3m14s

controlplane ~ ➜

first I created a secret using the spec file in quick reference also getting help from the cube CTL help but the thing is that everything is as it should be name of the secret key of the secret but before entering the value we have to encode the value of the secret with base 64 using Echo dash and pipe pay 64 then just create the yaml of the secret and apply it second we want to make the part to use this secret kubernetes does this as a volume and volume It's A Volatile one so we just create a volume reference the secret name and Mount a directory in the container and then in the volume mounts we use it all of these are available at the quick reference documentation