Scenario: You have a Kubernetes cluster with two namespaces: "frontend" and "backend." Pods in the "frontend" namespace should be able to communicate with pods in the "backend" namespace over TCP port 8080, but all other communication should be blocked.Task: Write a NetworkPolicy manifest that satisfies the requirements of the scenario.
Scenario: Your Kubernetes cluster hosts a multi-tier application consisting of frontend, backend, and database services. Pods in the "frontend" namespace should be able to communicate with pods in the "backend" namespace over TCP ports 80 and 443, but communication between the "backend" and "database" namespaces should be restricted to TCP port 5432.Task: Define NetworkPolicy rules to enforce the communication requirements described in the scenario.
Scenario: You have a Kubernetes cluster running a financial application. Pods in the "frontend" namespace should only be allowed to communicate with pods in the "backend" namespace over HTTPS (TCP port 443). Additionally, pods in the "backend" namespace should be restricted from initiating connections to any other namespace.Task: Create NetworkPolicy rules to enforce the security requirements specified in the scenario.
Scenario: Your Kubernetes cluster hosts multiple tenants, each with their own namespace. Tenants should be isolated from each other, and communication between pods in different namespaces should be restricted. However, pods within the same namespace should be allowed to communicate freely.Task: Design NetworkPolicy rules to achieve tenant isolation while allowing intra-namespace communication.
Scenario: You are deploying a Kubernetes application that requires access to an external API hosted at api.example.com over TCP port 443. However, you want to restrict egress traffic to only this API and block all other outbound connections from the pods.Task: Write NetworkPolicy rules to allow access to api.example.com while blocking all other egress traffic.