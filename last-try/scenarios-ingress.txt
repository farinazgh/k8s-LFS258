Scenario: You have a Kubernetes cluster hosting a web application with multiple services, including frontend, backend, and database. You need to expose the frontend service to external users over HTTP (port 80) and HTTPS (port 443), while ensuring that traffic to the backend and database services remains internal to the cluster.Task: Write an Ingress resource definition to expose the frontend service externally while keeping the backend and database services private.
Scenario: Your Kubernetes cluster hosts multiple web applications, each with its own frontend service. You want to set up a single point of entry for all these applications, routing traffic based on the request hostname to the respective frontend services.Task: Define an Ingress resource that routes traffic based on the request hostname to the appropriate frontend services.
Scenario: You are deploying a microservices-based application in your Kubernetes cluster, where each microservice is exposed through its own service. You want to provide external access to these microservices using a single domain name, with path-based routing to the respective services.Task: Create an Ingress resource that routes traffic based on the request path to the corresponding microservices.
Scenario: Your organization has a requirement to enforce SSL termination at the ingress level for all incoming traffic to web applications running in the Kubernetes cluster. Additionally, you need to configure HTTP to HTTPS redirection for all incoming requests.Task: Configure SSL termination and HTTP to HTTPS redirection in the Ingress resource definition.
Scenario: You have a Kubernetes cluster running multiple versions of the same application, each serving different user groups. You want to perform canary deployment by routing a percentage of traffic to the new version of the application while keeping the majority of traffic on the stable version.Task: Set up an Ingress resource to perform canary deployment by routing a percentage of traffic to the new version of the application.