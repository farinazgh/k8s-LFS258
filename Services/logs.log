kubectl -n kube-system get pod coredns-69f9c977-wz7f6 -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2024-03-15T14:59:05Z"
  generateName: coredns-69f9c977-
  labels:
    k8s-app: kube-dns
    pod-template-hash: 69f9c977
  name: coredns-69f9c977-wz7f6
  namespace: kube-system
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: coredns-69f9c977
    uid: 8a5cf705-cebe-447e-b34d-1ae1722f0ed3
  resourceVersion: "468"
  uid: 356076e9-dafd-4624-a236-52d0f8691285
spec:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: k8s-app
              operator: In
              values:
              - kube-dns
          topologyKey: kubernetes.io/hostname
        weight: 100
  containers:
  - args:
    - -conf
    - /etc/coredns/Corefile
    image: registry.k8s.io/coredns/coredns:v1.10.1
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /health
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: coredns
    ports:
    - containerPort: 53
      name: dns
      protocol: UDP
    - containerPort: 53
      name: dns-tcp
      protocol: TCP
    - containerPort: 9153
      name: metrics
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /ready
        port: 8181
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        memory: 170Mi
      requests:
        cpu: 100m
        memory: 70Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        add:
        - NET_BIND_SERVICE
        drop:
        - ALL
      readOnlyRootFilesystem: true
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /etc/coredns
      name: config-volume
      readOnly: true
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-nhr86
      readOnly: true
  dnsPolicy: Default
  enableServiceLinks: true
  nodeName: controlplane
  nodeSelector:
    kubernetes.io/os: linux
  preemptionPolicy: PreemptLowerPriority
  priority: 2000000000
  priorityClassName: system-cluster-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: coredns
  serviceAccountName: coredns
  terminationGracePeriodSeconds: 30
  tolerations:
  - key: CriticalAddonsOnly
    operator: Exists
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - configMap:
      defaultMode: 420
      items:
      - key: Corefile
        path: Corefile
      name: coredns
    name: config-volume
  - name: kube-api-access-nhr86
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2024-03-15T14:59:20Z"
    status: "True"
    type: PodReadyToStartContainers
  - lastProbeTime: null
    lastTransitionTime: "2024-03-15T14:59:07Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2024-03-15T14:59:20Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2024-03-15T14:59:20Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2024-03-15T14:59:07Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: containerd://5c95d6532c0360338076e6962f3d296403d7e6a6569e29518f3aa90922507000
    image: registry.k8s.io/coredns/coredns:v1.10.1
    imageID: registry.k8s.io/coredns/coredns@sha256:a0ead06651cf580044aeb0a0feba63591858fb2e43ade8c9dea45a6a89ae7e5e
    lastState: {}
    name: coredns
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-03-15T14:59:20Z"
  hostIP: 192.30.7.3
  hostIPs:
  - ip: 192.30.7.3
  phase: Running
  podIP: 10.244.0.2
  podIPs:
  - ip: 10.244.0.2
  qosClass: Burstable
  startTime: "2024-03-15T14:59:07Z"

controlplane ~ âžœ  kubectl -n kube-system get configmaps
NAME                                                   DATA   AGE
coredns                                                1      11m
extension-apiserver-authentication                     6      11m
kube-apiserver-legacy-service-account-token-tracking   1      11m
kube-proxy                                             2      11m
kube-root-ca.crt                                       1      10m
kubeadm-config                                         1      11m
kubelet-config                                         1      11m
kubectl -n kube-system get configmaps coredns -o yaml
apiVersion: v1
data:
  Corefile: |
    .:53 {
        errors
        health {
           lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           fallthrough in-addr.arpa ip6.arpa
           ttl 30
        }
        prometheus :9153
        forward . /etc/resolv.conf {
           max_concurrent 1000
        }
        cache 30
        loop
        reload
        loadbalance
    }
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"Corefile":".:53 {\n    errors\n    health {\n       lameduck 5s\n    }\n    ready\n    kubernetes cluster.local in-addr.arpa ip6.arpa {\n       pods insecure\n       fallthrough in-addr.arpa ip6.arpa\n       ttl 30\n    }\n    prometheus :9153\n    forward . /etc/resolv.conf {\n       max_concurrent 1000\n    }\n    cache 30\n    loop\n    reload\n    loadbalance\n}\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"coredns","namespace":"kube-system"}}
  creationTimestamp: "2024-03-15T14:58:52Z"
  name: coredns
  namespace: kube-system
  resourceVersion: "315"
  uid: 7250d9d0-d6d7-4008-8466-378b4b8591e3


   kubectl exec -it ubuntu -- /bin/bash
  root@ubuntu:/# dig -x 10.101.245.166

  ; <<>> DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu <<>> -x 10.101.245.166
  ;; global options: +cmd
  ;; Got answer:
  ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 18856
  ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
  ;; WARNING: recursion requested but not available

  ;; OPT PSEUDOSECTION:
  ; EDNS: version: 0, flags:; udp: 1232
  ; COOKIE: 0f005a169c1a26db (echoed)
  ;; QUESTION SECTION:
  ;166.245.101.10.in-addr.arpa.   IN      PTR

  ;; ANSWER SECTION:
  166.245.101.10.in-addr.arpa. 30 IN      PTR     nginx.default.svc.cluster.local.

  ;; Query time: 0 msec
  ;; SERVER: 10.96.0.10#53(10.96.0.10) (UDP)
  ;; WHEN: Fri Mar 15 15:13:32 UTC 2024
  ;; MSG SIZE  rcvd: 140

  root@ubuntu:/# dig nginx.default.svc.cluster.local.

  ; <<>> DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu <<>> nginx.default.svc.cluster.local.
  ;; global options: +cmd
  ;; Got answer:
  ;; WARNING: .local is reserved for Multicast DNS
  ;; You are currently testing what happens when an mDNS query is leaked to DNS
  ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 15096
  ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
  ;; WARNING: recursion requested but not available

  ;; OPT PSEUDOSECTION:
  ; EDNS: version: 0, flags:; udp: 1232
  ; COOKIE: 4cf9c164ba08cac2 (echoed)
  ;; QUESTION SECTION:
  ;nginx.default.svc.cluster.local. IN    A

  ;; ANSWER SECTION:
  nginx.default.svc.cluster.local. 30 IN  A       10.101.245.166

  ;; Query time: 0 msec
  ;; SERVER: 10.96.0.10#53(10.96.0.10) (UDP)
  ;; WHEN: Fri Mar 15 15:14:35 UTC 2024
  ;; MSG SIZE  rcvd: 119


  root@ubuntu:/# dig nginx.test.io

  ; <<>> DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu <<>> nginx.test.io
  ;; global options: +cmd
  ;; Got answer:
  ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 31169
  ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

  ;; OPT PSEUDOSECTION:
  ; EDNS: version: 0, flags:; udp: 1232
  ; COOKIE: 4de7544a573a10ba (echoed)
  ;; QUESTION SECTION:
  ;nginx.test.io.                 IN      A

  ;; ANSWER SECTION:
  nginx.test.io.          30      IN      A       35.227.200.127

  ;; Query time: 56 msec
  ;; SERVER: 10.96.0.10#53(10.96.0.10) (UDP)
  ;; WHEN: Fri Mar 15 15:15:19 UTC 2024
  ;; MSG SIZE  rcvd: 83


    1  ls
    2  vi nettool.yaml
    3  kubectl apply -f nettool.yaml
    4  kubectl exec -it ubuntu -- /bin/bash
    5  kubectl -n kube-system get svc kube-dns -o yaml
    6  kubectl get pod -l k8s-app --all-namespaces
    7  kubectl -n kube-system get pod coredns-69f9c977-wz7f6 -o yaml
    8  kubectl -n kube-system get configmaps
    9  kubectl -n kube-system get configmaps coredns -o yaml
   10  kubectl create deployment nginx --image=nginx
   11  kubectl expose deployment nginx --type=ClusterIP --port=80
   12  kubectl get svc
   13  kubectl exec -it ubuntu -- /bin/bash
   14  kubectl get all
   15  kubectl delete deployment nginx
   16  kubectl get all
   17  kubectl delete pod ubuntu
   18  clear
   19  history